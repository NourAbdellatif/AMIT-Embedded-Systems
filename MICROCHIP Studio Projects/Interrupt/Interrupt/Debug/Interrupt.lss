
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a5  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include	<avr/interrupt.h>
#include	<util/delay.h>

int main(void)
{
	DDRD = 0xF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0XFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	82 bb       	out	0x12, r24	; 18
	DDRA= 0XFF;
  74:	8a bb       	out	0x1a, r24	; 26
	
	
	//Sense mode of external interrupt 0 (Falling edge)
	SET_BIT(MCUCR,1);
  76:	95 b7       	in	r25, 0x35	; 53
  78:	92 60       	ori	r25, 0x02	; 2
  7a:	95 bf       	out	0x35, r25	; 53
	
	//Peripheral interrupt 0 Enable
	SET_BIT(GICR,6);
  7c:	9b b7       	in	r25, 0x3b	; 59
  7e:	90 64       	ori	r25, 0x40	; 64
  80:	9b bf       	out	0x3b, r25	; 59

	//Global Interrupt enable
	SET_BIT(SREG,7);
  82:	9f b7       	in	r25, 0x3f	; 63
  84:	90 68       	ori	r25, 0x80	; 128
  86:	9f bf       	out	0x3f, r25	; 63
	
	PORTA = 0XFF;
  88:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	81 ee       	ldi	r24, 0xE1	; 225
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
	_delay_ms(100);
	PORTA= 0X00;
  9c:	1b ba       	out	0x1b, r1	; 27
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	81 ee       	ldi	r24, 0xE1	; 225
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x44>

000000b2 <__vector_1>:
	{
	}
}

ISR(INT0_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	// Toggle LED when interrupt occurs
	PORTA = 0XFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	81 ee       	ldi	r24, 0xE1	; 225
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <__vector_1+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <__vector_1+0x24>
  d6:	00 00       	nop
	_delay_ms(100);
	PORTA= 0X00;
  d8:	1b ba       	out	0x1b, r1	; 27
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	81 ee       	ldi	r24, 0xE1	; 225
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_1+0x2e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_1+0x38>
  ea:	00 00       	nop
	_delay_ms(100);
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
