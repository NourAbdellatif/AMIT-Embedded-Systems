
KP_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004c4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cc  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000820  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081f  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b00  00000000  00000000  000030d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  7a:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_voidSetPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_voidSetPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_voidSetPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	a1 f5       	brne	.+104    	; 0xfa <DIO_voidSetPinDirection+0x78>
		{
			switch(PortID)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <DIO_voidSetPinDirection+0x36>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_voidSetPinDirection+0x20>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	c9 f0       	breq	.+50     	; 0xce <DIO_voidSetPinDirection+0x4c>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	11 f1       	breq	.+68     	; 0xe4 <DIO_voidSetPinDirection+0x62>
  a0:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinDirection+0x2c>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinDirection+0x28>
  b2:	82 2b       	or	r24, r18
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x42>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x3e>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
  ce:	24 b3       	in	r18, 0x14	; 20
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x58>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x54>
  de:	82 2b       	or	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
  e2:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x6a>
  f4:	82 2b       	or	r24, r18
  f6:	81 bb       	out	0x11, r24	; 17
  f8:	08 95       	ret
			}
		}else if(Direction == INPUT)
  fa:	41 11       	cpse	r20, r1
  fc:	37 c0       	rjmp	.+110    	; 0x16c <DIO_voidSetPinDirection+0xea>
		{
			switch(PortID)
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 f0       	breq	.+36     	; 0x126 <DIO_voidSetPinDirection+0xa4>
 102:	28 f0       	brcs	.+10     	; 0x10e <DIO_voidSetPinDirection+0x8c>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	d9 f0       	breq	.+54     	; 0x13e <DIO_voidSetPinDirection+0xbc>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	29 f1       	breq	.+74     	; 0x156 <DIO_voidSetPinDirection+0xd4>
 10c:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_voidSetPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_voidSetPinDirection+0x94>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	8a bb       	out	0x1a, r24	; 26
 124:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_voidSetPinDirection+0xb0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_voidSetPinDirection+0xac>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	87 bb       	out	0x17, r24	; 23
 13c:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xc4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_voidSetPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_voidSetPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_voidSetPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	a1 f5       	brne	.+104    	; 0x1e6 <DIO_voidSetPinValue+0x78>
		{
			switch(PortID)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_voidSetPinValue+0x36>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_voidSetPinValue+0x20>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_voidSetPinValue+0x4c>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_voidSetPinValue+0x62>
 18c:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinValue+0x2c>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinValue+0x28>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_voidSetPinValue+0x42>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_voidSetPinValue+0x3e>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x58>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x54>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21
 1ce:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x6e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x6a>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18
 1e4:	08 95       	ret
			}
		}else if(Value == LOW)
 1e6:	41 11       	cpse	r20, r1
 1e8:	37 c0       	rjmp	.+110    	; 0x258 <DIO_voidSetPinValue+0xea>
		{
			switch(PortID)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	91 f0       	breq	.+36     	; 0x212 <DIO_voidSetPinValue+0xa4>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <DIO_voidSetPinValue+0x8c>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	d9 f0       	breq	.+54     	; 0x22a <DIO_voidSetPinValue+0xbc>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	29 f1       	breq	.+74     	; 0x242 <DIO_voidSetPinValue+0xd4>
 1f8:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 1fa:	2b b3       	in	r18, 0x1b	; 27
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x94>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinValue+0xb0>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinValue+0xac>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinValue+0xc8>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinValue+0xc4>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_u8GetPinValue>:

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	70 f5       	brcc	.+92     	; 0x2ba <DIO_u8GetPinValue+0x60>
 25e:	68 30       	cpi	r22, 0x08	; 8
 260:	70 f5       	brcc	.+92     	; 0x2be <DIO_u8GetPinValue+0x64>
	{	
		switch(PortID)
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	79 f0       	breq	.+30     	; 0x284 <DIO_u8GetPinValue+0x2a>
 266:	28 f0       	brcs	.+10     	; 0x272 <DIO_u8GetPinValue+0x18>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	a9 f0       	breq	.+42     	; 0x296 <DIO_u8GetPinValue+0x3c>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	e1 f0       	breq	.+56     	; 0x2a8 <DIO_u8GetPinValue+0x4e>
 270:	28 c0       	rjmp	.+80     	; 0x2c2 <DIO_u8GetPinValue+0x68>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(PINA_REG,PinID);	break;
 272:	89 b3       	in	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_u8GetPinValue+0x22>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_u8GetPinValue+0x1e>
 280:	81 70       	andi	r24, 0x01	; 1
 282:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(PINB_REG,PinID);	break;
 284:	86 b3       	in	r24, 0x16	; 22
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8GetPinValue+0x34>
 28a:	95 95       	asr	r25
 28c:	87 95       	ror	r24
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_u8GetPinValue+0x30>
 292:	81 70       	andi	r24, 0x01	; 1
 294:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(PINC_REG,PinID);	break;
 296:	83 b3       	in	r24, 0x13	; 19
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8GetPinValue+0x46>
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8GetPinValue+0x42>
 2a4:	81 70       	andi	r24, 0x01	; 1
 2a6:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(PIND_REG,PinID);	break;
 2a8:	80 b3       	in	r24, 0x10	; 16
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8GetPinValue+0x58>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8GetPinValue+0x54>
 2b6:	81 70       	andi	r24, 0x01	; 1
 2b8:	08 95       	ret
u8 x = DIO_voidGetPinValue(PORTA,PIN0); GET(PINA,0) 
*/

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	08 95       	ret
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	08 95       	ret
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Returen Error 								*/
	}	
	return Local_u8Value ;
}
 2c4:	08 95       	ret

000002c6 <DIO_voidSetPortDirection>:
void	DIO_voidSetPortDirection(u8 PortID , u8 Direction)
{
	if(PortID <4){
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	78 f4       	brcc	.+30     	; 0x2e8 <DIO_voidSetPortDirection+0x22>
		switch(PortID){
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	41 f0       	breq	.+16     	; 0x2de <DIO_voidSetPortDirection+0x18>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_voidSetPortDirection+0x14>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <DIO_voidSetPortDirection+0x1c>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_voidSetPortDirection+0x20>
 2d8:	08 95       	ret
			case PORTA:		
						DDRA_REG = Direction ;
 2da:	6a bb       	out	0x1a, r22	; 26
						break;
 2dc:	08 95       	ret
			case PORTB:
						DDRB_REG = Direction ;
 2de:	67 bb       	out	0x17, r22	; 23
						break;
 2e0:	08 95       	ret
			case PORTC:
						DDRC_REG = Direction ;
 2e2:	64 bb       	out	0x14, r22	; 20
						break;
 2e4:	08 95       	ret
			case PORTD:
						DDRD_REG = Direction ;
 2e6:	61 bb       	out	0x11, r22	; 17
 2e8:	08 95       	ret

000002ea <DIO_voidSetPortValue>:
	}	
}

void	DIO_voidSetPortValue(u8 PortID , u8 Value){
	
	if(PortID <4){
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	78 f4       	brcc	.+30     	; 0x30c <DIO_voidSetPortValue+0x22>
		switch(PortID){
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	41 f0       	breq	.+16     	; 0x302 <DIO_voidSetPortValue+0x18>
 2f2:	28 f0       	brcs	.+10     	; 0x2fe <DIO_voidSetPortValue+0x14>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	39 f0       	breq	.+14     	; 0x306 <DIO_voidSetPortValue+0x1c>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	39 f0       	breq	.+14     	; 0x30a <DIO_voidSetPortValue+0x20>
 2fc:	08 95       	ret
			case PORTA:
						PORTA_REG = Value;
 2fe:	6b bb       	out	0x1b, r22	; 27
						break;
 300:	08 95       	ret
			case PORTB:
						PORTB_REG = Value;
 302:	68 bb       	out	0x18, r22	; 24
						break;
 304:	08 95       	ret
			case PORTC:
						PORTC_REG = Value;
 306:	65 bb       	out	0x15, r22	; 21
						break;
 308:	08 95       	ret
			case PORTD:
						PORTD_REG = Value;
 30a:	62 bb       	out	0x12, r22	; 18
 30c:	08 95       	ret

0000030e <main>:
#include		<util/delay.h>
int main(void)
{
	/*	Init 				*/
	/*	PB2 ,1 , 3 = OUTPUT 		*/
	DIO_voidSetPinDirection(PORTB,PIN1,OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN2,OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN3,OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	/*	PORTA = OUTPUT*/
	DIO_voidSetPortDirection(PORTA,0xFF);
 32c:	6f ef       	ldi	r22, 0xFF	; 255
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_voidSetPortDirection>
	/*	PORTD = Keypad (0:3 ==> OUTPUT) && (4:7 ==> INPUT Pulled up) */
	DIO_voidSetPortDirection(PORTD,0x0F);
 334:	6f e0       	ldi	r22, 0x0F	; 15
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(PORTD,0XF0);
 33c:	60 ef       	ldi	r22, 0xF0	; 240
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidSetPortValue>
	
	/*	LCD init	  */
	LCD_voidInit8bit();
 344:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidInit8bit>
	u8	PressedKey=0xFF;
	while(1)
	{
		PressedKey = KP_u8GetPressedKey();
 348:	0e 94 ab 01 	call	0x356	; 0x356 <KP_u8GetPressedKey>
		if(PressedKey != 0xFF)
 34c:	8f 3f       	cpi	r24, 0xFF	; 255
 34e:	e1 f3       	breq	.-8      	; 0x348 <main+0x3a>
		{
			LCD_voidWriteChar8bit(PressedKey);
 350:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteChar8bit>
 354:	f9 cf       	rjmp	.-14     	; 0x348 <main+0x3a>

00000356 <KP_u8GetPressedKey>:
	{'1','2','3','-'},
	{'.','0','=','+'}
	};

u8		KP_u8GetPressedKey(void)
{
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
	u8 Local_u8Val = 0xFF;
	// Deactivate Column and Row
	DIO_voidSetPortValue(KP_PORT,0xFF);
 35c:	6f ef       	ldi	r22, 0xFF	; 255
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidSetPortValue>
	for(u8 Col=0;Col<4;Col++){
 364:	d0 e0       	ldi	r29, 0x00	; 0
	{'.','0','=','+'}
	};

u8		KP_u8GetPressedKey(void)
{
	u8 Local_u8Val = 0xFF;
 366:	1f ef       	ldi	r17, 0xFF	; 255
	// Deactivate Column and Row
	DIO_voidSetPortValue(KP_PORT,0xFF);
	for(u8 Col=0;Col<4;Col++){
 368:	2c c0       	rjmp	.+88     	; 0x3c2 <KP_u8GetPressedKey+0x6c>
		// Send Sequence (Activate Column)
		DIO_voidSetPinValue(KP_PORT,Col,LOW);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	6d 2f       	mov	r22, r29
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
		// Check which Rows
		for(u8 Row=4;Row<8;Row++)
 374:	c4 e0       	ldi	r28, 0x04	; 4
 376:	1d c0       	rjmp	.+58     	; 0x3b2 <KP_u8GetPressedKey+0x5c>
		{
			if((DIO_u8GetPinValue(KP_PORT,Row)==0))
 378:	6c 2f       	mov	r22, r28
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_u8GetPinValue>
 380:	81 11       	cpse	r24, r1
 382:	16 c0       	rjmp	.+44     	; 0x3b0 <KP_u8GetPressedKey+0x5a>
			{
				Local_u8Val = KP_u8arr[Col][Row-4];
 384:	8d 2f       	mov	r24, r29
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	2c 2f       	mov	r18, r28
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	24 50       	subi	r18, 0x04	; 4
 38e:	31 09       	sbc	r19, r1
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	80 5a       	subi	r24, 0xA0	; 160
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	fc 01       	movw	r30, r24
 39e:	e2 0f       	add	r30, r18
 3a0:	f3 1f       	adc	r31, r19
 3a2:	10 81       	ld	r17, Z
				// Bouncing
				//_delay_ms(5);	
				while((DIO_u8GetPinValue(KP_PORT,Row)==0));
 3a4:	6c 2f       	mov	r22, r28
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_u8GetPinValue>
 3ac:	88 23       	and	r24, r24
 3ae:	d1 f3       	breq	.-12     	; 0x3a4 <KP_u8GetPressedKey+0x4e>
	DIO_voidSetPortValue(KP_PORT,0xFF);
	for(u8 Col=0;Col<4;Col++){
		// Send Sequence (Activate Column)
		DIO_voidSetPinValue(KP_PORT,Col,LOW);
		// Check which Rows
		for(u8 Row=4;Row<8;Row++)
 3b0:	cf 5f       	subi	r28, 0xFF	; 255
 3b2:	c8 30       	cpi	r28, 0x08	; 8
 3b4:	08 f3       	brcs	.-62     	; 0x378 <KP_u8GetPressedKey+0x22>
			
		}
		
		
		// Return Sequence
		DIO_voidSetPinValue(KP_PORT,Col,HIGH);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	6d 2f       	mov	r22, r29
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
u8		KP_u8GetPressedKey(void)
{
	u8 Local_u8Val = 0xFF;
	// Deactivate Column and Row
	DIO_voidSetPortValue(KP_PORT,0xFF);
	for(u8 Col=0;Col<4;Col++){
 3c0:	df 5f       	subi	r29, 0xFF	; 255
 3c2:	d4 30       	cpi	r29, 0x04	; 4
 3c4:	90 f2       	brcs	.-92     	; 0x36a <KP_u8GetPressedKey+0x14>
		// Return Sequence
		DIO_voidSetPinValue(KP_PORT,Col,HIGH);
	}
	return Local_u8Val;
	
 3c6:	81 2f       	mov	r24, r17
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <LCD_voidWriteChar8bit>:
	LCD_voidSendCMD8bit(0x01);
	_delay_ms(2);
	/*		Entry Mode Display  Cursor Increases				*/
	LCD_voidSendCMD8bit(0x06);
}
void	LCD_voidWriteChar8bit(u8 Data){
 3d0:	cf 93       	push	r28
 3d2:	c8 2f       	mov	r28, r24
	/*1-RS=1 to send Char										*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS,HIGH);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
	/*2-RW=0 to write Char										*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
	/*3-EN must be latched (EN=1)								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,HIGH);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_voidWriteChar8bit+0x26>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_voidWriteChar8bit+0x2c>
 3fc:	00 00       	nop
	_delay_ms(5);
	/*4-Send CMD								*/
	DIO_voidSetPortValue(LCD_DATA_PORT,Data);
 3fe:	6c 2f       	mov	r22, r28
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidSetPortValue>
	/*3-EN must be latched (EN=0)								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	9e e4       	ldi	r25, 0x4E	; 78
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(5);
}
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_voidSendCMD8bit>:
void	LCD_voidSendCMD8bit(u8 CMD){
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
	/*1-RS=0 to send CMD										*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS,LOW);
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
	/*2-RW=0 to write CMD										*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
	/*3-EN must be latched (EN=1)								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,HIGH);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	9e e4       	ldi	r25, 0x4E	; 78
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <LCD_voidSendCMD8bit+0x26>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_voidSendCMD8bit+0x2c>
 44c:	00 00       	nop
	_delay_ms(5);
	/*4-Send CMD								*/
	DIO_voidSetPortValue(LCD_DATA_PORT,CMD);
 44e:	6c 2f       	mov	r22, r28
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidSetPortValue>
	/*3-EN must be latched (EN=0)								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,LOW);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPinValue>
 460:	8f e1       	ldi	r24, 0x1F	; 31
 462:	9e e4       	ldi	r25, 0x4E	; 78
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <LCD_voidSendCMD8bit+0x44>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_voidSendCMD8bit+0x4a>
 46a:	00 00       	nop
	_delay_ms(5);
	
}
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <LCD_voidInit8bit>:
 470:	2f e7       	ldi	r18, 0x7F	; 127
 472:	85 eb       	ldi	r24, 0xB5	; 181
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <LCD_voidInit8bit+0x6>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_voidInit8bit+0x10>
 480:	00 00       	nop
void	LCD_voidInit8bit(void){
	
	/* 		After Power ON		*/
	_delay_ms(35);
	/*		Function Set 2 lines of Display and Font Size 5*7	*/
	LCD_voidSendCMD8bit(0x38);
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCMD8bit>
 488:	8f e9       	ldi	r24, 0x9F	; 159
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_voidInit8bit+0x1c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_voidInit8bit+0x22>
 492:	00 00       	nop
	_delay_ms(1);
	/*		Display ON/OFF Control Display ON, Cursor OFF		*/
	LCD_voidSendCMD8bit(0x0C);
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCMD8bit>
 49a:	8f e9       	ldi	r24, 0x9F	; 159
 49c:	9f e0       	ldi	r25, 0x0F	; 15
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_voidInit8bit+0x2e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_voidInit8bit+0x34>
 4a4:	00 00       	nop
	_delay_ms(1);
	/*		Display Clear										*/
	LCD_voidSendCMD8bit(0x01);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCMD8bit>
 4ac:	8f e3       	ldi	r24, 0x3F	; 63
 4ae:	9f e1       	ldi	r25, 0x1F	; 31
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_voidInit8bit+0x40>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_voidInit8bit+0x46>
 4b6:	00 00       	nop
	_delay_ms(2);
	/*		Entry Mode Display  Cursor Increases				*/
	LCD_voidSendCMD8bit(0x06);
 4b8:	86 e0       	ldi	r24, 0x06	; 6
 4ba:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCMD8bit>
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
