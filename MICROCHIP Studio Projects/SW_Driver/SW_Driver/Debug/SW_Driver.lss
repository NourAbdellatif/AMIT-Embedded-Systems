
SW_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a73  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052e  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000760  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00002653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  64:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
			switch(PortID)
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	a1 f5       	brne	.+104    	; 0xe4 <DIO_voidSetPinDirection+0x78>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <DIO_voidSetPinDirection+0x36>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <DIO_voidSetPinDirection+0x62>
  8a:	08 95       	ret
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
  a2:	27 b3       	in	r18, 0x17	; 23
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinDirection+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinDirection+0x3e>
  b2:	82 2b       	or	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
  b8:	24 b3       	in	r18, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x6a>
  de:	82 2b       	or	r24, r18
  e0:	81 bb       	out	0x11, r24	; 17
  e2:	08 95       	ret
  e4:	41 11       	cpse	r20, r1
  e6:	37 c0       	rjmp	.+110    	; 0x156 <DIO_voidSetPinDirection+0xea>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 f0       	breq	.+36     	; 0x110 <DIO_voidSetPinDirection+0xa4>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	d9 f0       	breq	.+54     	; 0x128 <DIO_voidSetPinDirection+0xbc>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f1       	breq	.+74     	; 0x140 <DIO_voidSetPinDirection+0xd4>
  f6:	08 95       	ret
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x94>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0xac>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_u8GetPinValue>:

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	70 f5       	brcc	.+92     	; 0x1b8 <DIO_u8GetPinValue+0x60>
 15c:	68 30       	cpi	r22, 0x08	; 8
 15e:	70 f5       	brcc	.+92     	; 0x1bc <DIO_u8GetPinValue+0x64>
	{	
		switch(PortID)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	79 f0       	breq	.+30     	; 0x182 <DIO_u8GetPinValue+0x2a>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_u8GetPinValue+0x18>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	a9 f0       	breq	.+42     	; 0x194 <DIO_u8GetPinValue+0x3c>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	e1 f0       	breq	.+56     	; 0x1a6 <DIO_u8GetPinValue+0x4e>
 16e:	28 c0       	rjmp	.+80     	; 0x1c0 <DIO_u8GetPinValue+0x68>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(PINA_REG,PinID);	break;
 170:	89 b3       	in	r24, 0x19	; 25
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_u8GetPinValue+0x22>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_u8GetPinValue+0x1e>
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(PINB_REG,PinID);	break;
 182:	86 b3       	in	r24, 0x16	; 22
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_u8GetPinValue+0x34>
 188:	95 95       	asr	r25
 18a:	87 95       	ror	r24
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_u8GetPinValue+0x30>
 190:	81 70       	andi	r24, 0x01	; 1
 192:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(PINC_REG,PinID);	break;
 194:	83 b3       	in	r24, 0x13	; 19
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_u8GetPinValue+0x46>
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_u8GetPinValue+0x42>
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(PIND_REG,PinID);	break;
 1a6:	80 b3       	in	r24, 0x10	; 16
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_u8GetPinValue+0x58>
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_u8GetPinValue+0x54>
 1b4:	81 70       	andi	r24, 0x01	; 1
 1b6:	08 95       	ret
u8 x = DIO_voidGetPinValue(PORTA,PIN0); GET(PINA,0) 
*/

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	08 95       	ret
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	08 95       	ret
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Returen Error 								*/
	}	
	return Local_u8Value ;
}
 1c2:	08 95       	ret

000001c4 <main>:
#define		PIND			*((volatile u8 *)0x30)

int main(void)
{
    /* Replace with your application code */
	SW_voidSetSwitchDirection(SW_0);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 ef 00 	call	0x1de	; 0x1de <SW_voidSetSwitchDirection>
    while (1)
    {
		if(SW_intSwitchPressed(SW_0)){
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 07 01 	call	0x20e	; 0x20e <SW_intSwitchPressed>
 1d0:	89 2b       	or	r24, r25
 1d2:	19 f0       	breq	.+6      	; 0x1da <main+0x16>
			PORTC = 0x80;
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	f8 cf       	rjmp	.-16     	; 0x1ca <main+0x6>
		}
		else{
			PORTC = 0;
 1da:	15 ba       	out	0x15, r1	; 21
 1dc:	f6 cf       	rjmp	.-20     	; 0x1ca <main+0x6>

000001de <SW_voidSetSwitchDirection>:
#include		"SW_private.h"



void		SW_voidSetSwitchDirection(u8 SW_ID){
	switch(SW_ID){
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	81 f0       	breq	.+32     	; 0x202 <SW_voidSetSwitchDirection+0x24>
 1e2:	86 30       	cpi	r24, 0x06	; 6
 1e4:	41 f0       	breq	.+16     	; 0x1f6 <SW_voidSetSwitchDirection+0x18>
 1e6:	81 11       	cpse	r24, r1
 1e8:	11 c0       	rjmp	.+34     	; 0x20c <SW_voidSetSwitchDirection+0x2e>
		case SW_0:
				DIO_voidSetPinDirection(Port_0,SW_0,INPUT);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
				break;
 1f4:	08 95       	ret
		case SW_1:
				DIO_voidSetPinDirection(Port_1,SW_1,INPUT);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	66 e0       	ldi	r22, 0x06	; 6
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
				break;
 200:	08 95       	ret
		case SW_2:
				DIO_voidSetPinDirection(Port_2,SW_2,INPUT);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 20c:	08 95       	ret

0000020e <SW_intSwitchPressed>:
	}
	
}

int		SW_intSwitchPressed( u8 SW_ID ){
	switch(SW_ID){
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	a9 f0       	breq	.+42     	; 0x23c <SW_intSwitchPressed+0x2e>
 212:	86 30       	cpi	r24, 0x06	; 6
 214:	59 f0       	breq	.+22     	; 0x22c <SW_intSwitchPressed+0x1e>
 216:	81 11       	cpse	r24, r1
 218:	19 c0       	rjmp	.+50     	; 0x24c <SW_intSwitchPressed+0x3e>
		case SW_0:
				if(DIO_u8GetPinValue(Port_0,SW_0)==1){
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_u8GetPinValue>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	a1 f0       	breq	.+40     	; 0x24e <SW_intSwitchPressed+0x40>
					return 1;
				}
				else{
					return 0;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 95       	ret
				}
				break;
		case SW_1:
				if(DIO_u8GetPinValue(Port_1,SW_1)==1){
 22c:	66 e0       	ldi	r22, 0x06	; 6
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_u8GetPinValue>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	71 f4       	brne	.+28     	; 0x254 <SW_intSwitchPressed+0x46>
					return 1;
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret
				else{
					return 0;
				}
				break;
		case SW_2:
				if(DIO_u8GetPinValue(Port_2,SW_2)==1){
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_u8GetPinValue>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	49 f4       	brne	.+18     	; 0x25a <SW_intSwitchPressed+0x4c>
					return 1;
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret
					return 0;
				}
				break;
	}
	
 24c:	08 95       	ret

int		SW_intSwitchPressed( u8 SW_ID ){
	switch(SW_ID){
		case SW_0:
				if(DIO_u8GetPinValue(Port_0,SW_0)==1){
					return 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret
		case SW_1:
				if(DIO_u8GetPinValue(Port_1,SW_1)==1){
					return 1;
				}
				else{
					return 0;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	08 95       	ret
		case SW_2:
				if(DIO_u8GetPinValue(Port_2,SW_2)==1){
					return 1;
				}
				else{
					return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
				}
				break;
	}
	
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
