
Test DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000825  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064e  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003af  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031f  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	/*	Init 				*/
	/*	PC7 = OUTPUT 		*/
	DIO_voidSetPinDirection(PORTC,PIN7,OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	67 e0       	ldi	r22, 0x07	; 7
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	0e 94 63 00 	call	0xc6	; 0xc6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN2,INPUT);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	62 e0       	ldi	r22, 0x02	; 2
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 63 00 	call	0xc6	; 0xc6 <DIO_voidSetPinDirection>
	while(1)
	{
		/*	LED ON C7 			*/
		if(DIO_u8GetPinValue(PORTD,PIN2)==1){
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8GetPinValue>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	d1 f7       	brne	.-12     	; 0x80 <main+0x14>
			DIO_voidSetPinValue(PORTC,PIN7,HIGH);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	67 e0       	ldi	r22, 0x07	; 7
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			_delay_ms(1000);
			DIO_voidSetPinValue(PORTC,PIN7,LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	67 e0       	ldi	r22, 0x07	; 7
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_voidSetPinValue>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	dd cf       	rjmp	.-70     	; 0x80 <main+0x14>

000000c6 <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	08 f0       	brcs	.+2      	; 0xcc <DIO_voidSetPinDirection+0x6>
  ca:	72 c0       	rjmp	.+228    	; 0x1b0 <DIO_voidSetPinDirection+0xea>
  cc:	68 30       	cpi	r22, 0x08	; 8
  ce:	08 f0       	brcs	.+2      	; 0xd2 <DIO_voidSetPinDirection+0xc>
  d0:	6f c0       	rjmp	.+222    	; 0x1b0 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	a1 f5       	brne	.+104    	; 0x13e <DIO_voidSetPinDirection+0x78>
		{
			switch(PortID)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	89 f0       	breq	.+34     	; 0xfc <DIO_voidSetPinDirection+0x36>
  da:	28 f0       	brcs	.+10     	; 0xe6 <DIO_voidSetPinDirection+0x20>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	c9 f0       	breq	.+50     	; 0x112 <DIO_voidSetPinDirection+0x4c>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	11 f1       	breq	.+68     	; 0x128 <DIO_voidSetPinDirection+0x62>
  e4:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_voidSetPinDirection+0x2c>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_voidSetPinDirection+0x28>
  f6:	82 2b       	or	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinDirection+0x42>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinDirection+0x3e>
 10c:	82 2b       	or	r24, r18
 10e:	87 bb       	out	0x17, r24	; 23
 110:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDirection+0x58>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDirection+0x54>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0x6e>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0x6a>
 138:	82 2b       	or	r24, r18
 13a:	81 bb       	out	0x11, r24	; 17
 13c:	08 95       	ret
			}
		}else if(Direction == INPUT)
 13e:	41 11       	cpse	r20, r1
 140:	37 c0       	rjmp	.+110    	; 0x1b0 <DIO_voidSetPinDirection+0xea>
		{
			switch(PortID)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	91 f0       	breq	.+36     	; 0x16a <DIO_voidSetPinDirection+0xa4>
 146:	28 f0       	brcs	.+10     	; 0x152 <DIO_voidSetPinDirection+0x8c>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	d9 f0       	breq	.+54     	; 0x182 <DIO_voidSetPinDirection+0xbc>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	29 f1       	breq	.+74     	; 0x19a <DIO_voidSetPinDirection+0xd4>
 150:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0x98>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0x94>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8a bb       	out	0x1a, r24	; 26
 168:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xb0>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xac>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinDirection+0xc8>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinDirection+0xc4>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	84 bb       	out	0x14, r24	; 20
 198:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 19a:	21 b3       	in	r18, 0x11	; 17
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_voidSetPinDirection+0xe0>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_voidSetPinDirection+0xdc>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	08 95       	ret

000001b2 <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 1b2:	84 30       	cpi	r24, 0x04	; 4
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <DIO_voidSetPinValue+0x6>
 1b6:	72 c0       	rjmp	.+228    	; 0x29c <DIO_voidSetPinValue+0xea>
 1b8:	68 30       	cpi	r22, 0x08	; 8
 1ba:	08 f0       	brcs	.+2      	; 0x1be <DIO_voidSetPinValue+0xc>
 1bc:	6f c0       	rjmp	.+222    	; 0x29c <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	a1 f5       	brne	.+104    	; 0x22a <DIO_voidSetPinValue+0x78>
		{
			switch(PortID)
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <DIO_voidSetPinValue+0x36>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <DIO_voidSetPinValue+0x20>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <DIO_voidSetPinValue+0x4c>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	11 f1       	breq	.+68     	; 0x214 <DIO_voidSetPinValue+0x62>
 1d0:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 1d2:	2b b3       	in	r18, 0x1b	; 27
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_voidSetPinValue+0x2c>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_voidSetPinValue+0x28>
 1e2:	82 2b       	or	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_voidSetPinValue+0x42>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_voidSetPinValue+0x3e>
 1f8:	82 2b       	or	r24, r18
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 1fe:	25 b3       	in	r18, 0x15	; 21
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_voidSetPinValue+0x58>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_voidSetPinValue+0x54>
 20e:	82 2b       	or	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x6e>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x6a>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
			}
		}else if(Value == LOW)
 22a:	41 11       	cpse	r20, r1
 22c:	37 c0       	rjmp	.+110    	; 0x29c <DIO_voidSetPinValue+0xea>
		{
			switch(PortID)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	91 f0       	breq	.+36     	; 0x256 <DIO_voidSetPinValue+0xa4>
 232:	28 f0       	brcs	.+10     	; 0x23e <DIO_voidSetPinValue+0x8c>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	d9 f0       	breq	.+54     	; 0x26e <DIO_voidSetPinValue+0xbc>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	29 f1       	breq	.+74     	; 0x286 <DIO_voidSetPinValue+0xd4>
 23c:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0x98>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0x94>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinValue+0xb0>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinValue+0xac>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_voidSetPinValue+0xc8>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_voidSetPinValue+0xc4>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	85 bb       	out	0x15, r24	; 21
 284:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 286:	22 b3       	in	r18, 0x12	; 18
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_voidSetPinValue+0xe0>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_voidSetPinValue+0xdc>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	82 bb       	out	0x12, r24	; 18
 29c:	08 95       	ret

0000029e <DIO_u8GetPinValue>:

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 29e:	84 30       	cpi	r24, 0x04	; 4
 2a0:	70 f5       	brcc	.+92     	; 0x2fe <DIO_u8GetPinValue+0x60>
 2a2:	68 30       	cpi	r22, 0x08	; 8
 2a4:	70 f5       	brcc	.+92     	; 0x302 <DIO_u8GetPinValue+0x64>
	{	
		switch(PortID)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	79 f0       	breq	.+30     	; 0x2c8 <DIO_u8GetPinValue+0x2a>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_u8GetPinValue+0x18>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	a9 f0       	breq	.+42     	; 0x2da <DIO_u8GetPinValue+0x3c>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <DIO_u8GetPinValue+0x4e>
 2b4:	28 c0       	rjmp	.+80     	; 0x306 <DIO_u8GetPinValue+0x68>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(PINA_REG,PinID);	break;
 2b6:	89 b3       	in	r24, 0x19	; 25
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_u8GetPinValue+0x22>
 2bc:	95 95       	asr	r25
 2be:	87 95       	ror	r24
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_u8GetPinValue+0x1e>
 2c4:	81 70       	andi	r24, 0x01	; 1
 2c6:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(PINB_REG,PinID);	break;
 2c8:	86 b3       	in	r24, 0x16	; 22
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8GetPinValue+0x34>
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8GetPinValue+0x30>
 2d6:	81 70       	andi	r24, 0x01	; 1
 2d8:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(PINC_REG,PinID);	break;
 2da:	83 b3       	in	r24, 0x13	; 19
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8GetPinValue+0x46>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8GetPinValue+0x42>
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(PIND_REG,PinID);	break;
 2ec:	80 b3       	in	r24, 0x10	; 16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8GetPinValue+0x58>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8GetPinValue+0x54>
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	08 95       	ret
u8 x = DIO_voidGetPinValue(PORTA,PIN0); GET(PINA,0) 
*/

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	08 95       	ret
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	08 95       	ret
 306:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Returen Error 								*/
	}	
	return Local_u8Value ;
}
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
