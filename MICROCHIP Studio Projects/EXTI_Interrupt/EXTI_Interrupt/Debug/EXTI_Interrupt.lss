
EXTI_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b94  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000791  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000622  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000593  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  74:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_voidSetPinDirection+0x6>
  80:	72 c0       	rjmp	.+228    	; 0x166 <DIO_voidSetPinDirection+0xea>
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_voidSetPinDirection+0xc>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_voidSetPinDirection+0x78>
		{
			switch(PortID)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_voidSetPinDirection+0x36>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_voidSetPinDirection+0x20>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_voidSetPinDirection+0x4c>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_voidSetPinDirection+0x62>
  9a:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_voidSetPinDirection+0x2c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_voidSetPinDirection+0x28>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x42>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x3e>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x58>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x54>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x6a>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
			}
		}else if(Direction == INPUT)
  f4:	41 11       	cpse	r20, r1
  f6:	37 c0       	rjmp	.+110    	; 0x166 <DIO_voidSetPinDirection+0xea>
		{
			switch(PortID)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 f0       	breq	.+36     	; 0x120 <DIO_voidSetPinDirection+0xa4>
  fc:	28 f0       	brcs	.+10     	; 0x108 <DIO_voidSetPinDirection+0x8c>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	d9 f0       	breq	.+54     	; 0x138 <DIO_voidSetPinDirection+0xbc>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	29 f1       	breq	.+74     	; 0x150 <DIO_voidSetPinDirection+0xd4>
 106:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
 108:	2a b3       	in	r18, 0x1a	; 26
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinDirection+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinDirection+0x94>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0xac>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
 136:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0xc8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0xc4>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_voidSetPinDirection+0xe0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_voidSetPinDirection+0xdc>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_voidSetPinValue+0x6>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <DIO_voidSetPinValue+0xea>
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_voidSetPinValue+0xc>
 172:	6f c0       	rjmp	.+222    	; 0x252 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	a1 f5       	brne	.+104    	; 0x1e0 <DIO_voidSetPinValue+0x78>
		{
			switch(PortID)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	89 f0       	breq	.+34     	; 0x19e <DIO_voidSetPinValue+0x36>
 17c:	28 f0       	brcs	.+10     	; 0x188 <DIO_voidSetPinValue+0x20>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	c9 f0       	breq	.+50     	; 0x1b4 <DIO_voidSetPinValue+0x4c>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	11 f1       	breq	.+68     	; 0x1ca <DIO_voidSetPinValue+0x62>
 186:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_voidSetPinValue+0x2c>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_voidSetPinValue+0x28>
 198:	82 2b       	or	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 19e:	28 b3       	in	r18, 0x18	; 24
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_voidSetPinValue+0x42>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_voidSetPinValue+0x3e>
 1ae:	82 2b       	or	r24, r18
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 1b4:	25 b3       	in	r18, 0x15	; 21
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPinValue+0x58>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPinValue+0x54>
 1c4:	82 2b       	or	r24, r18
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 1ca:	22 b3       	in	r18, 0x12	; 18
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinValue+0x6e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinValue+0x6a>
 1da:	82 2b       	or	r24, r18
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret
			}
		}else if(Value == LOW)
 1e0:	41 11       	cpse	r20, r1
 1e2:	37 c0       	rjmp	.+110    	; 0x252 <DIO_voidSetPinValue+0xea>
		{
			switch(PortID)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	91 f0       	breq	.+36     	; 0x20c <DIO_voidSetPinValue+0xa4>
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <DIO_voidSetPinValue+0x8c>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	d9 f0       	breq	.+54     	; 0x224 <DIO_voidSetPinValue+0xbc>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	29 f1       	breq	.+74     	; 0x23c <DIO_voidSetPinValue+0xd4>
 1f2:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 1f4:	2b b3       	in	r18, 0x1b	; 27
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinValue+0x98>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinValue+0x94>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	8b bb       	out	0x1b, r24	; 27
 20a:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 20c:	28 b3       	in	r18, 0x18	; 24
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_voidSetPinValue+0xb0>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_voidSetPinValue+0xac>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0xc8>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0xc4>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinValue+0xe0>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinValue+0xdc>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <EXTI_app>:
#include	<util/delay.h>

void	EXTI_app	(void)
{
	// Toggle LED
	DIO_voidSetPinValue(PORTA,PIN1,HIGH);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <EXTI_app+0x10>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <EXTI_app+0x1a>
 26e:	00 00       	nop
	_delay_ms(100);
	DIO_voidSetPinValue(PORTA,PIN1,LOW);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	81 ee       	ldi	r24, 0xE1	; 225
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <EXTI_app+0x2c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <EXTI_app+0x36>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <main>:
	
}

int main(void)
{
	EXTI0_voidSetCallBack(EXTI_app);
 28e:	8a e2       	ldi	r24, 0x2A	; 42
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 88 01 	call	0x310	; 0x310 <EXTI0_voidSetCallBack>
	//DIO initialization
	DIO_voidSetPinDirection(PORTD,PIN2,INPUT);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,PIN2,HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
	
	DIO_voidSetPinDirection(PORTB,PIN1,OUTPUT);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	
	//Sense Mode
	EXTI0_voidInit();
 2b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <EXTI0_voidInit>
	//PIE enable
	EXTI0_voidEnable();
 2b8:	0e 94 84 01 	call	0x308	; 0x308 <EXTI0_voidEnable>
	//GIE enable
	GIE_voidEnable();
 2bc:	0e 94 b4 01 	call	0x368	; 0x368 <GIE_voidEnable>
	while(1)
	{
		DIO_voidSetPinValue(PORTB,PIN1,HIGH);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x42>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x4c>
 2da:	00 00       	nop
		_delay_ms(100);
		DIO_voidSetPinValue(PORTB,PIN1,LOW);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	81 ee       	ldi	r24, 0xE1	; 225
 2ea:	94 e0       	ldi	r25, 0x04	; 4
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x5e>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x68>
 2f6:	00 00       	nop
 2f8:	e3 cf       	rjmp	.-58     	; 0x2c0 <main+0x32>

000002fa <EXTI0_voidInit>:
	SET_BIT(GICR_REG,6);
	
}
void	EXTI0_voidDisable(void)
{
	CLR_BIT(GICR_REG,6);
 2fa:	8b b7       	in	r24, 0x3b	; 59
 2fc:	8f 7b       	andi	r24, 0xBF	; 191
 2fe:	8b bf       	out	0x3b, r24	; 59
 300:	8b b7       	in	r24, 0x3b	; 59
 302:	8f 7b       	andi	r24, 0xBF	; 191
 304:	8b bf       	out	0x3b, r24	; 59
 306:	08 95       	ret

00000308 <EXTI0_voidEnable>:
 308:	8b b7       	in	r24, 0x3b	; 59
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	8b bf       	out	0x3b, r24	; 59
 30e:	08 95       	ret

00000310 <EXTI0_voidSetCallBack>:
	
}
// Copy_PF = EXTI_app
void	EXTI0_voidSetCallBack(void (*Copy_PF)(void))
{
	EXTI0_CallBack = Copy_PF;
 310:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 314:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 318:	08 95       	ret

0000031a <__vector_1>:
	
}

void	__vector_1 (void)
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	//EX_app(); 
	EXTI0_CallBack();
 33c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 344:	09 95       	icall
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <GIE_voidEnable>:
#include		"GIE_interface.h"
#include		"GIE_private.h"

void		GIE_voidEnable(void)
{
	SET_BIT(SREG_REG,7);
 368:	8f b7       	in	r24, 0x3f	; 63
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8f bf       	out	0x3f, r24	; 63
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
